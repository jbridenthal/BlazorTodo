@page "/"
@using BlazorTodo.Models
@using BlazorTodo.Pages.Components
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedLocalStorage BrowserStorage
@using BlazorTodo.Services.Interface
@inject BlazorTodo.Services.Interface.ITodoService _todoService

   <div class="col-md-6">
      <div class="row">
        <div class="col">
          <h3 class="text-lg-center">To Do List!</h3>
        </div>
      </div>
      <div class="row">
        <div class="col">
			<TodoList Todos="@todos" OnClick="@ToggleTodoCompleted"></TodoList>
		</div>
			</div>
			<div class="row p-1">
			<div class="col">
				<div class="form-floating p-1">
					<input id="todoTitle" type="text" placeholder="Todo title" class="form-control"  @bind="@todoTitle" />
					<label for="todoTitle">Todo title</label>
				</div>
			</div>
			<div class="col d-inline-flex ">    
				<button class="btn btn-primary btn-block p-2" @onclick=AddTodo>Add Todo</button>
				<button class="btn btn-primary btn-block p-2" @onclick=ClearCompletedTodos>Clear Completed Todos</button>
			</div>
      </div>
      <div class="row">
        <div class="col">
			<h5 class="text-lg-left p-1 ">@todos.Count(x=>x.Completed == false) todos left</h5>
          </div>
      </div>
    </div>

@code {
	private List<TodoModel> todos = new List<TodoModel>();

	private string? todoTitle { get; set; }
	const string LOCAL_STORAGE_TODOS  = "todoList.todos";
	

	 protected  override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			todos = await _todoService.GetStoredTodos();
            StateHasChanged();
		}
	}

	async Task AddTodo()
	{
		todos = await _todoService.AddTodo(todoTitle);
		todoTitle = null;
		StateHasChanged();
	}

	public async void ToggleTodoCompleted(TodoModel todo)
	{
		todos = await _todoService.ToggleTodoCompleted(todo);
		StateHasChanged();
	}

	public async Task ClearCompletedTodos() {
		todos = await _todoService.ClearCompletedTodos();
		StateHasChanged();
	}
}